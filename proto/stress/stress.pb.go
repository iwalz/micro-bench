// Code generated by protoc-gen-go.
// source: github.com/iwalz/bench/proto/stress/stress.proto
// DO NOT EDIT!

/*
Package go_micro_srv_bench is a generated protocol buffer package.

It is generated from these files:
	github.com/iwalz/bench/proto/stress/stress.proto

It has these top-level messages:
	Response
	Request
	NetworkRequest
	NetworkResponse
*/
package go_micro_srv_bench

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Response struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Request struct {
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NetworkRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *NetworkRequest) Reset()                    { *m = NetworkRequest{} }
func (m *NetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkRequest) ProtoMessage()               {}
func (*NetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NetworkResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *NetworkResponse) Reset()                    { *m = NetworkResponse{} }
func (m *NetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkResponse) ProtoMessage()               {}
func (*NetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Response)(nil), "go.micro.srv.bench.Response")
	proto.RegisterType((*Request)(nil), "go.micro.srv.bench.Request")
	proto.RegisterType((*NetworkRequest)(nil), "go.micro.srv.bench.NetworkRequest")
	proto.RegisterType((*NetworkResponse)(nil), "go.micro.srv.bench.NetworkResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Stress service

type StressClient interface {
	StressCPU(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	StressMemory(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	StressIO(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	StressNetwork(ctx context.Context, in *NetworkRequest, opts ...client.CallOption) (*NetworkResponse, error)
	StressRDS(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type stressClient struct {
	c           client.Client
	serviceName string
}

func NewStressClient(serviceName string, c client.Client) StressClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.bench"
	}
	return &stressClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *stressClient) StressCPU(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Stress.StressCPU", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stressClient) StressMemory(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Stress.StressMemory", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stressClient) StressIO(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Stress.StressIO", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stressClient) StressNetwork(ctx context.Context, in *NetworkRequest, opts ...client.CallOption) (*NetworkResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Stress.StressNetwork", in)
	out := new(NetworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stressClient) StressRDS(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Stress.StressRDS", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stress service

type StressHandler interface {
	StressCPU(context.Context, *Request, *Response) error
	StressMemory(context.Context, *Request, *Response) error
	StressIO(context.Context, *Request, *Response) error
	StressNetwork(context.Context, *NetworkRequest, *NetworkResponse) error
	StressRDS(context.Context, *Request, *Response) error
}

func RegisterStressHandler(s server.Server, hdlr StressHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Stress{hdlr}, opts...))
}

type Stress struct {
	StressHandler
}

func (h *Stress) StressCPU(ctx context.Context, in *Request, out *Response) error {
	return h.StressHandler.StressCPU(ctx, in, out)
}

func (h *Stress) StressMemory(ctx context.Context, in *Request, out *Response) error {
	return h.StressHandler.StressMemory(ctx, in, out)
}

func (h *Stress) StressIO(ctx context.Context, in *Request, out *Response) error {
	return h.StressHandler.StressIO(ctx, in, out)
}

func (h *Stress) StressNetwork(ctx context.Context, in *NetworkRequest, out *NetworkResponse) error {
	return h.StressHandler.StressNetwork(ctx, in, out)
}

func (h *Stress) StressRDS(ctx context.Context, in *Request, out *Response) error {
	return h.StressHandler.StressRDS(ctx, in, out)
}

func init() { proto.RegisterFile("github.com/iwalz/bench/proto/stress/stress.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x2c, 0x4f, 0xcc, 0xa9, 0xd2, 0x4f, 0x4a, 0xcd,
	0x4b, 0xce, 0xd0, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x2e, 0x29, 0x4a, 0x2d, 0x2e, 0x86,
	0x52, 0x7a, 0x60, 0x31, 0x21, 0xa1, 0xf4, 0x7c, 0xbd, 0xdc, 0xcc, 0xe4, 0xa2, 0x7c, 0xbd, 0xe2,
	0xa2, 0x32, 0x3d, 0xb0, 0x6a, 0x25, 0x15, 0x2e, 0x8e, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2,
	0x54, 0x21, 0x09, 0x2e, 0xf6, 0x5c, 0xa0, 0xea, 0xc4, 0xf4, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x18, 0x57, 0x89, 0x93, 0x8b, 0x3d, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x49,
	0x8b, 0x8b, 0xcf, 0x2f, 0xb5, 0xa4, 0x3c, 0xbf, 0x28, 0x1b, 0x2a, 0x82, 0x47, 0x9b, 0x36, 0x17,
	0x3f, 0x5c, 0x2d, 0x21, 0x3b, 0x8c, 0xfa, 0x98, 0xb9, 0xd8, 0x82, 0xc1, 0xce, 0x15, 0xf2, 0xe0,
	0xe2, 0x84, 0xb0, 0x9c, 0x03, 0x42, 0x85, 0xa4, 0xf5, 0x30, 0x9d, 0xad, 0x07, 0xb5, 0x5b, 0x4a,
	0x06, 0xbb, 0x24, 0xc4, 0x32, 0x25, 0x06, 0x21, 0x6f, 0x2e, 0x1e, 0x88, 0x49, 0xbe, 0xa9, 0xb9,
	0xf9, 0x45, 0x95, 0x94, 0x19, 0xe6, 0xce, 0xc5, 0x01, 0x31, 0xcc, 0xd3, 0x9f, 0x32, 0x83, 0xa2,
	0xb8, 0x78, 0x21, 0x06, 0x41, 0x43, 0x47, 0x48, 0x09, 0x9b, 0x06, 0xd4, 0x60, 0x96, 0x52, 0xc6,
	0xab, 0x06, 0x6e, 0x36, 0x3c, 0xec, 0x82, 0x5c, 0x82, 0x29, 0x72, 0x65, 0x12, 0x1b, 0x38, 0xd5,
	0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x61, 0xb6, 0x9c, 0x5c, 0x69, 0x02, 0x00, 0x00,
}
